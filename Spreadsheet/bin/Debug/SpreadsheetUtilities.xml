<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetUtilities</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:SpreadsheetUtilities.DependencyGraph" -->
        <member name="M:SpreadsheetUtilities.DependencyGraph.#ctor">
            <summary>
            Creates an empty DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Size">
            <summary>
            The number of ordered pairs in the DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Item(System.String)">
            <summary>
            The size of dependees of (s).
            This property is an example of an indexer.  If dg is a DependencyGraph, you would
            invoke it like this:
            dg["a"]
            It should return the size of dependees("a")
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependents(System.String)">
            <summary>
            Reports whether dependents(s) is non-empty. 
            Dependents depend on s.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependees(System.String)">
            <summary>
            Reports whether dependees(s) is non-empty. 
            s depends on it's dependees.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependents(System.String)">
            <summary>
            Enumerates direct dependents of (s).
            Dependents depend on s.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependees(System.String)">
            <summary>
            Enumerates direct dependees of (s).
            s depends on it's dependees.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,System.String)">
             <summary>
             <para>Adds the ordered pair (s,t), if it doesn't exist</para>
             
             <para>This should be thought of as:</para>   
             
               t depends on s
            
             </summary>
             <param name="s"> s must be evaluated first. T depends on S</param>
             <param name="t"> t cannot be evaluated until s is</param>        /// 
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the ordered pair (s,t), if it exists
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependents(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (s,r) where s depends on r.  
            Then, for each t in newDependents, adds the ordered pair (s,t).
            Dependents depends on s.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (r,s) where s depends on r.
            Then, for each t in newDependees, adds the ordered pair (t,s).
            s depends on it's dependees.
            </summary>
        </member>
    </members>
</doc>
