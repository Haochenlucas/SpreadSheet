<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ContentsTextBox.Text" xml:space="preserve">
    <value>Introduction -
	This spreadsheet application is simple and easy to use!  Its purpose is to record whatever 
	information you want an organized cell grid.  You can enter numbers, words, sentences, 
	mathematical expression, and other cells.  Use it to keep track of inventory, game scores,
	or anything else you can think of.


How To Use -
	
	The Basics -
		The spreadsheet is just one giant grid of cells, A-Z and 0-99.  Each cell holds a value 
		that you can change.  By default a cell's value is 0, so if you reference an emtpy cell 
		in a formula it will just treat it as a 0.  
	
	Cell Editing - 
		You can edit a cell by clicking on it and typing in whatever contents you want that
		cell to have.  Notice that when you type it appears in the text box above the cell
		grid and not immediately in the cell, that is okay.  As soon as you hit enter the
		cell's value will be updated.  But that's not all!  Any cell's that depend on that
		cell will automatically be updated as well. You can ajust the spliter between cell value 
		display and cell content editbox.
	
	Valid Input - 
		Just about anything can be put into a cell, but be careful!  Obviously you can not 
		perform mathematical operations on a cell containing words.  The "official" valid 
		inputs are numbers, words or sentences, or formulas.
	
	Formulas - 
		You can create simple single-cell formulas or increasingly complex and dynamic
		formulas in this spreadsheet.  To set a cell's contents to a formula, just prepend
		an equal sign before your desired expression or cell name.  In order to evaluate,
		the given formula must follow general rules of mathematical expressions and can
		not form a circular dependency with other cell's involved.  Some examples are seen
		below.
		
		Valid Formulas:      =A1 + B9 / 100 * 10
				 = 99 * 501203858691 - 0 * 50 + C1
		
		Invalid Formulas:     A2 + 3		                (Note the missing = sign!)
				   =A1 * 50 / 0		(Note the division by 0)
	
	Saving a File - 
		To save your spreadsheet, just use the File dropdown and select Save!  If you
		want to create a new name for your spreadsheet file, just select Save As.  
		You can also use the Hotkey combo "Ctrl+S" to save more quickly.  All 
		spreadsheet files are saved as a .sprd file.  	
		
	Opening a File - 
		To open a previously made .sprd file, just go to the File dropdown and select
		Open!  A window will popup containing all your previously saved spreadsheet
		work.  You can also use the Hotkey combo "Ctrl+O" to quickly open a different
		spreadsheet.  Your current spreadsheet window will remain open.

	Creating a New File - 
		To create more than one spreadsheet at the same time or start a brand new one, 
		you can open a new empty window by selecting the File dropdown and and 
		clicking New.  Your current window will remain open.  You can also use the 
		Hotkey combo "Ctrl+N" to open a new spreadsheet more quickly.

	Exiting a File - 
		To exit a spreadsheet, you can select the File dropdown and click Exit.  You
		can also press the X in the upper-right corner of the screen. 	</value>
  </data>
</root>